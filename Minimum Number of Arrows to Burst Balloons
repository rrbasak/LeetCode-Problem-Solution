/*
    Company Tags                : Google, Facebook, PayPal, Microsoft
    Leetcode Link               : https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/
*/

// Approach-1 (Sorting on the basis of start coordinate)
// T.C : O(nlogn)
// S.C : O(n) space
class Solution {
    public int findMinArrowShots(int[][] points) {
        int n = points.length;
        Arrays.sort(points,(a,b)->Integer.compare(a[0],b[0]));
        int[] prev = points[0];
        int count=1;
        for(int i=1;i<n;i++){
            int prevStartIndex = prev[0];
            int prevEndIndex = prev[1];

            int curStartIndex = points[i][0];
            int curEndIndex = points[i][1];  

            if(curStartIndex>prevEndIndex){
                prev=points[i];
                count++;
            }   
            else{
                prev[0]=Math.max(prevStartIndex,curStartIndex);
                prev[1]=Math.min(prevEndIndex,curEndIndex);
            }   
        }
        return count;
    }
}



// Approach-1 Sorting on the basis of "End coordinate"
// T.C : O(nlogn)
// S.C : O(1)
class Solution {
    public int findMinArrowShots(int[][] points) {
        int n = points.length;
        Arrays.sort(points,(a,b)->Integer.compare(a[1],b[1]));
        int prevEndIndex = points[0][1];
        int count=1;
        for(int i=1;i<n;i++){
            int curStartIndex = points[i][0];
            if(curStartIndex>prevEndIndex){
                prevEndIndex=points[i][1];
                count++;
            }   
        }
        return count;
    }
}